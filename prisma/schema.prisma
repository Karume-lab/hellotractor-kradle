generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  role      UserRole @default(USER)
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  hashPassword        String?
  role                UserRole             @default(USER)
  sessions            Session[]
  passwordResetTokens PasswordResetToken[]
  profile             Profile?
  tasks               Task[]
}

model Profile {
  id                String      @id @default(cuid())
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String      @unique
  firstName         String
  lastName          String
  middleName        String?
  displayName       String?
  bio               String?
  profilePicture    FileUpload?
  buyer             Buyer?
  seller            Seller?
  sellerId          String?
  trainedOperatorId String?
}

enum UserRole {
  ADMIN
  USER
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
}

model Buyer {
  id        String  @id @default(cuid())
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @unique

  contacts Contact[]
  messages Message[] @relation("BuyerMessages")
}

model Seller {
  id        String  @id @default(cuid())
  isDealer  Boolean @default(false)
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @unique

  contacts   Contact[]
  services   Service[]
  messages   Message[]   @relation("SellerMessages")
  equipments Equipment[]

  licenses     FileUpload[] @relation("SellerLicense")
  coverPicture FileUpload?  @relation("SellerCoverPicture")
  logo         FileUpload?  @relation("SellerLogo")

  businessOpeningHours String?
  businessName         String?
  businessSlogal       String?
  businessBio          String?
}

model Message {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  replyToId String?
  replyTo   Message?  @relation("Reply", fields: [replyToId], references: [id])
  replies   Message[] @relation("Reply")

  buyerId String?
  buyer   Buyer?  @relation("BuyerMessages", fields: [buyerId], references: [id], onDelete: Cascade)

  sellerId String?
  seller   Seller? @relation("SellerMessages", fields: [sellerId], references: [id], onDelete: Cascade)
}

model Dealer {
  id       String    @id @default(cuid())
  name     String
  contacts Contact[]
  services Service[]
}

model TrainedOperator {
  id String @id @default(cuid())

  firstName   String
  lastName    String
  middleName  String?
  displayName String?
  bio         String?

  isVerified Boolean? @default(true)

  profilePicture FileUpload?
  services       Service[]

  contacts Contact[]
}

model Service {
  id String @id @default(cuid())

  title        String
  description  String
  certificates FileUpload[]

  price Float?

  trainedOperator   TrainedOperator? @relation(fields: [trainedOperatorId], references: [id])
  trainedOperatorId String?

  dealer   Dealer? @relation(fields: [dealerId], references: [id])
  dealerId String?

  seller   Seller? @relation(fields: [sellerId], references: [id])
  sellerId String?
}

model Attachment {
  id          String    @id @default(cuid())
  equipmentId String    @unique
  color       String?
  equipment   Equipment @relation("EquipmentToAttachment", fields: [equipmentId], references: [id], onDelete: Cascade)
}

model Tractor {
  id           String    @id @default(cuid())
  mileage      String
  fuelCapacity String
  equipmentId  String    @unique
  equipment    Equipment @relation("EquipmentToTractor", fields: [equipmentId], references: [id], onDelete: Cascade)
}

model Equipment {
  id            String              @id @default(cuid())
  name          String
  description   String?
  images        FileUpload[]
  price         Float
  condition     EquipmentCondition?
  averageRating Float               @default(0)
  isSold        Boolean             @default(false)

  tractor Tractor? @relation("EquipmentToTractor")

  attachment Attachment? @relation("EquipmentToAttachment")
  seller     Seller?     @relation(fields: [sellerId], references: [id])
  sellerId   String?
}

enum EquipmentCondition {
  BRAND_NEW
  SELLER_REFURBISHED
  MANUFACTURER_REFURBISHED
}

model FileUpload {
  id                     String                @id @default(cuid())
  path                   String
  extension              FileExtension
  category               FileCategoryEnum
  description            String?
  reviewableFileUpload   ReviewableFileUpload? @relation(fields: [reviewableFileUploadId], references: [id])
  reviewableFileUploadId String?

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @unique

  trainedOperator   TrainedOperator @relation(fields: [trainedOperatorId], references: [id], onDelete: Cascade)
  trainedOperatorId String          @unique

  trainedOperatorService   Service @relation(fields: [trainedOperatorServiceId], references: [id], onDelete: Cascade)
  trainedOperatorServiceId String

  sellerLicense        Seller  @relation("SellerLicense", fields: [sellerLicenseId], references: [id], onDelete: Cascade)
  sellerLicenseId      String
  sellerCoverPicture   Seller? @relation("SellerCoverPicture", fields: [sellerCoverPictureId], references: [id])
  sellerCoverPictureId String  @unique
  sellerLogo           Seller? @relation("SellerLogo", fields: [sellerLogoId], references: [id])
  sellerLogoId         String  @unique

  equipmentImage   Equipment @relation(fields: [equipmentImageId], references: [id], onDelete: Cascade)
  equipmentImageId String
}

model ReviewableFileUpload {
  id          String                     @id @default(cuid())
  FileUploads FileUpload[]
  status      ReviewableFileUploadStatus @default(PENDING)
}

enum ReviewableFileUploadStatus {
  PENDING
  REJECTED
  APPROVED
}

enum FileCategoryEnum {
  PROFILE_PICTURE
  TRAINED_OPERATOR_CERTIFICATE
  BUSINESS_LICENSE
}

enum FileExtension {
  PNG
  PDF
  JPEG
  WEBP
  JPG
}

model Review {
  id     String @id @default(cuid())
  text   String
  rating Int
}

model Cart {
  id String @id @default(cuid())
}

model WishList {
  id String @id @default(cuid())
}

model Location {
  id String @id @default(cuid())
}

model Notification {
  id String @id @default(cuid())
}

model Task {
  id     String @id @default(cuid())
  title  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Contact {
  id String @id @default(cuid())

  phoneNumber String?
  email       String?

  seller   Seller? @relation(fields: [sellerId], references: [id])
  sellerId String?

  buyer   Buyer?  @relation(fields: [buyerId], references: [id])
  buyerId String?

  trainedOperator   TrainedOperator? @relation(fields: [trainedOperatorId], references: [id])
  trainedOperatorId String?

  dealer   Dealer? @relation(fields: [dealerId], references: [id])
  dealerId String?
}
